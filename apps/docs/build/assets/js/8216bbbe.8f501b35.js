"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[498],{876:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,f=m["".concat(p,".").concat(d)]||m[d]||c[d]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8156:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c}});var r=n(7896),a=n(1461),o=(n(2784),n(876)),i=["components"],l={},p="Forms",s={unversionedId:"react-with-native/form",id:"react-with-native/form",title:"Forms",description:"Plug-and-play yet unopinionated and extensible forms constructor for React and React Native apps with high-class typescript support!",source:"@site/../../docs/react-with-native/form.md",sourceDirName:"react-with-native",slug:"/react-with-native/form",permalink:"/react-with-native/form",draft:!1,editUrl:"https://github.com/Code-From-Anywhere/react-with-native/tree/main/apps/docs/../../docs/react-with-native/form.md",tags:[],version:"current",frontMatter:{},sidebar:"docSidebar",previous:{title:"Form inputs",permalink:"/react-with-native/form-inputs"},next:{title:"Modal",permalink:"/react-with-native/modal"}},u={},c=[],m={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"forms"},"Forms"),(0,o.kt)("p",null,"Plug-and-play yet unopinionated and extensible forms constructor for React and React Native apps with high-class typescript support!"),(0,o.kt)("h1",{id:"installation"},"Installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add react-with-native-form\n")),(0,o.kt)("p",null,"Please note:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"You need to create your own inputs, or you can use our default inputs, see ",(0,o.kt)("a",{parentName:"li",href:"/react-with-native/form-inputs"},"Form inputs")," for installation instructions"),(0,o.kt)("li",{parentName:"ul"},"You need ",(0,o.kt)("a",{parentName:"li",href:"/react-with-native"},"react-with-native")," for this.")),(0,o.kt)("h1",{id:"usage"},"Usage"),(0,o.kt)("p",null,"Create a wrapper like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import DataForm, {\n  setConfig,\n  makeInputField,\n  Field,\n  Keys,\n  DataFormProps,\n} from "react-with-native-form";\n\nimport {\n  TextInput,\n  TextInputType,\n  PasswordInput,\n  PasswordInputType,\n  DateInput,\n  DateInputType,\n  DatetimeInput,\n  DatetimeInputType,\n  // MapInput,\n  // MapInputType,\n  NumberInput,\n  NumberInputType,\n  SelectInput,\n  SelectInputType,\n  StarsInput,\n  StarsInputType,\n  PhoneInput,\n  PhoneInputType,\n  TextAreaInput,\n  TextAreaInputType,\n  TimeInputType,\n  TimeInput,\n  ToggleInput,\n  ToggleInputType,\n  SelectMultipleInput,\n  SelectMultipleInputType,\n} from "react-with-native-form-inputs";\n\nconst text = { component: TextInput };\nconst password = { component: PasswordInput };\nconst date = { component: DateInput };\nconst datetime = { component: DatetimeInput };\nconst number = { component: NumberInput };\nconst select = { component: SelectInput };\nconst selectMultiple = { component: SelectMultipleInput };\nconst stars = { component: StarsInput };\nconst phone = { component: PhoneInput };\nconst textArea = { component: TextAreaInput };\nconst time = { component: TimeInput };\nconst toggle = { component: ToggleInput };\n\nconst plugins = {\n  text,\n  password,\n  date,\n  datetime,\n  number,\n  select,\n  selectMultiple,\n  stars,\n  phone,\n  textArea,\n  time,\n  toggle,\n};\n\nexport const makeField = <T extends Keys<Inputs>>(\n  type: T,\n  config: Omit<Field<Inputs, T>, "type">\n) => makeInputField<Inputs, T>(type, config);\n\nexport interface Inputs {\n  text: TextInputType;\n  password: PasswordInputType;\n  date: DateInputType;\n  datetime: DatetimeInputType;\n  number: NumberInputType;\n  select: SelectInputType;\n  selectMultiple: SelectMultipleInputType;\n  stars: StarsInputType;\n  phone: PhoneInputType;\n  textArea: TextAreaInputType;\n  time: TimeInputType;\n  toggle: ToggleInputType;\n}\n\nexport type InputValues = {\n  [key in keyof Inputs]: Inputs[key]["value"];\n};\n\nexport const Form = <TState extends { [key: string]: any } = any>(\n  props: DataFormProps<Inputs, TState>\n) =>\n  setConfig<Inputs, TState>(DataForm, {\n    plugins,\n  })(props);\n')),(0,o.kt)("p",null,"Now you can create a form like this. Please note we use all possible inputs that we created from ",(0,o.kt)("inlineCode",{parentName:"p"},"react-with-native-form-inputs")," here, but of course you can always create your own inputs if you want. We also set a defaultValue here from the local storage:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Div } from "react-with-native";\nimport { Item } from "react-with-native-select";\nimport { Form, InputValues, makeField } from "../components/Form";\nimport useStore from "../store";\n\nconst options: Item<string>[] = [\n  { value: "1", label: "Option 1" },\n  { value: "2", label: "Option 2" },\n  { value: "3", label: "Option 3" },\n  { value: "4", label: "Option 4" },\n];\n\nconst fields = [\n  makeField("text", {\n    field: "text",\n    title: "Text",\n    hasError: (value) => (value.length === 0 ? "Please fill in a text" : false),\n  }),\n  makeField("password", {\n    field: "password",\n    title: "Password",\n    hasError: (value) =>\n      value.length === 0 ? "Please fill in a password" : false,\n  }),\n\n  makeField("date", { field: "date", title: "Date" }),\n  makeField("datetime", { field: "datetime", title: "Datetime" }),\n  makeField("number", { field: "number", title: "Number" }),\n  makeField("phone", { field: "phone", title: "Phone" }),\n  makeField("select", {\n    field: "select",\n    title: "Select",\n    extra: {\n      options,\n    },\n  }),\n\n  makeField("selectMultiple", {\n    field: "selectMultiple",\n    title: "Select multiple",\n    extra: {\n      options,\n    },\n  }),\n  makeField("stars", { field: "stars", title: "Stars" }),\n  makeField("textArea", { field: "textArea", title: "Text area" }),\n  makeField("time", { field: "time", title: "Time" }),\n  makeField("toggle", {\n    field: "toggle",\n    title: "Toggle",\n    extra: { label: "Toggle this on or off" },\n  }),\n];\n\n// Now your form can be rendered like this\n// Make sure to provide the generic based on the inputs type interfaces\n// otherwise your form won\'t be typesafe!\n\nconst FormPage = () => {\n  const [name] = useStore("name");\n  return (\n    <Div scroll className="p-4 w-full mx-4 lg:mx-20">\n      <Form<{\n        text: InputValues["text"];\n        password: InputValues["password"];\n        date: InputValues["date"];\n        datetime: InputValues["datetime"];\n        number: InputValues["number"];\n        phone: InputValues["phone"];\n        select: InputValues["select"];\n        selectMultiple: InputValues["selectMultiple"];\n        stars: InputValues["stars"];\n        textArea: InputValues["textArea"];\n        time: InputValues["time"];\n        toggle: InputValues["toggle"];\n      }>\n        title="Form Example"\n        fields={fields}\n        onSubmit={(values, resolve, reject) => {\n          //do something with those values\n          const message = `Form submitted. Hello, ${values.text}`;\n          resolve(message);\n        }}\n        defaultValues={{ text: name || "" }}\n      />\n    </Div>\n  );\n};\n\nexport default FormPage;\n')))}d.isMDXComponent=!0}}]);