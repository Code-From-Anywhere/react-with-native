"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[801],{876:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(2784);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),d=a,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return t?r.createElement(f,o(o({ref:n},c),{},{components:t})):r.createElement(f,o({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4011:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var r=t(7896),a=t(1461),i=(t(2784),t(876)),o=["components"],l={},s="Forms",p={unversionedId:"react-with-native-form",id:"react-with-native-form",title:"Forms",description:"Plug-and-play yet unopinionated and extensible forms constructor for React and React Native apps",source:"@site/../../docs/5.react-with-native-form.md",sourceDirName:".",slug:"/react-with-native-form",permalink:"/react-with-native-form",draft:!1,editUrl:"https://github.com/Code-From-Anywhere/react-with-native/tree/main/apps/docs/../../docs/5.react-with-native-form.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"docSidebar",previous:{title:"Storage",permalink:"/react-with-native-store"},next:{title:"Notifications",permalink:"/react-with-native-notification"}},c={},u=[],m={toc:u};function d(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"forms"},"Forms"),(0,i.kt)("p",null,"Plug-and-play yet unopinionated and extensible forms constructor for React and React Native apps"),(0,i.kt)("h1",{id:"installation"},"Installation"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"make sure you install ",(0,i.kt)("a",{parentName:"p",href:"/react-with-native"},"react-with-native"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"yarn add react-with-native-form")))),(0,i.kt)("h1",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Choose the packages you want to include for the different input types:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"yarn add react-with-native-text-input react-with-native-password-input react-with-native-toggle-input react-with-native-select-input react-with-native-textarea-input react-with-native-date-input react-with-native-phone-input react-with-native-number-input\n")),(0,i.kt)("p",null,"Then create a wrapper like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'import DataForm, {\n    setConfig,\n    makeInputField,\n    Field,\n    Keys,\n    DataFormProps,\n    Plugin,\n  } from "react-with-native-form";\n\n  import TextInput, { TextInputType } from "react-with-native-text-input";\n  import PasswordInput, {\n    PasswordInputType,\n  } from "react-with-native-password-input";\n  import ToggleInput, { ToggleInputType } from "react-with-native-toggle-input";\n  import ImageInput, { ImageInputType, ImageValue } from "./ImageInput";\n\n  import SelectInput, { SelectInputType } from "react-with-native-select-input";\n  import TextAreaInput, {\n    TextAreaInputType,\n  } from "react-with-native-textarea-input";\n  import DateInput, { DateInputType } from "react-with-native-date-input";\n  import PhoneInput, { PhoneInputType } from "react-with-native-phone-input";\n  import NumberInput, { NumberInputType } from "react-with-native-number-input";\n  import { getEnv } from "react-with-native";\n\n  export const isValidImage = (value: ImageValue | null) =>\n    !!value?.base64 && !!value?.url;\n\n  const text = {\n    component: TextInput,\n  };\n\n\n  const phone = {\n    component: PhoneInput,\n  };\n  const date = {\n    component: DateInput,\n  };\n  const password = {\n    component: PasswordInput,\n  };\n\n  const toggle = {\n    component: ToggleInput,\n  };\n\n  const image = {\n    component: ImageInput,\n  };\n\n\n  const select = {\n    component: SelectInput,\n  };\n\n\n  const textArea = {\n    component: TextAreaInput,\n  };\n\n  const number = {\n    component: NumberInput,\n  };\n\n  const plugins = {\n    text,\n    password,\n    toggle,\n    image,\n    select,\n    textArea,\n    date,\n    phone,\n    number,\n  };\n\n  export const makeField = <T extends Keys<AllInputs>>(\n    type: T,\n    config: Omit<Field<AllInputs, T>, "type">\n  ) => makeInputField<AllInputs, T>(type, config);\n\n  export interface AllInputs {\n    text: TextInputType;\n    password: PasswordInputType;\n    toggle: ToggleInputType;\n    image: ImageInputType;\n    select: SelectInputType;\n    textArea: TextAreaInputType;\n    date: DateInputType;\n    phone: PhoneInputType;\n    number: NumberInputType;\n  }\n\n  export const Form = <TState extends { [key: string]: any } = any>(\n    props: DataFormProps<AllInputs, TState>\n  ) =>\n    setConfig<AllInputs, TState>(DataForm, {\n      plugins,\n    })(props);\n')),(0,i.kt)("p",null,"Now you can create a form like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#import this\nimport { Form, makeField } from "../components/form";\n\n# define your fields\nconst fields =\n      [\n          makeField("text", {\n            field: "username",\n            title: "Username",\n            startSection: true,\n            sectionTitle: "Account",\n            extra: {\n              placeholder: "Username",\n            },\n            hasError: (value) =>\n              !isValidVarchar(value as string, false)\n                ? "Fill in a username that\'s less than 256 characters"\n                : false,\n          }),\n\n          makeField("text", {\n            field: "email",\n            title: "Email",\n            extra: {\n              placeholder: "Email",\n            },\n            hasError: (value) =>\n              !isValidVarchar(value as string, false)\n                ? "Fill in an email that\'s less than 256 characters"\n                : false,\n          }),\n\n          makeField("password", {\n            field: "password1",\n            title: "Password",\n            extra: {\n              placeholder: "password",\n            },\n            hasError: (value) =>\n              !isValidVarchar(value as string, false, 1024)\n                ? "Fill in a password shorter than 1024 characters"\n                : false,\n          }),\n\n          makeField("password", {\n            field: "password2",\n            title: "Repeat Password",\n            extra: {\n              placeholder: "password",\n            },\n            hasError: (value) =>\n              !isValidVarchar(value as string, false, 1024)\n                ? "Fill in a password shorter than 1024 characters"\n                : false,\n          }),\n\n          makeField("text", {\n            field: "name",\n            title: "Name",\n            startSection: true,\n            sectionTitle: "Personal Information",\n            extra: {\n              placeholder: "Name",\n            },\n            hasError: (value) =>\n              !isValidVarchar(value as string, false)\n                ? "Fill in a name that\'s less than 256 characters"\n                : false,\n          }),\n\n          makeField("text", {\n            field: "phone",\n            title: "Phone number",\n            extra: {\n              placeholder: "Phone number",\n            },\n            hasError: (value) =>\n              !isValidVarchar(value as string, false)\n                ? "Fill in a phone number"\n                : false,\n          }),\n\n          makeField("text", {\n            field: "country",\n            title: "Country",\n            startSection: true,\n            sectionTitle: "Geography",\n            extra: {\n              placeholder: "Country",\n            },\n            hasError: (value) =>\n              !isValidVarchar(value as string, false)\n                ? "Fill in a country that\'s less than 256 characters"\n                : false,\n          }),\n\n          makeField("text", {\n            field: "city",\n            title: "City",\n            extra: {\n              placeholder: "City",\n            },\n            hasError: (value) =>\n              !isValidVarchar(value as string, false)\n                ? "Fill in a city that\'s less than 256 characters"\n                : false,\n          }),\n        ];\n\n# render this\n <Form\n    title="Become a host"\n    fields={fields}\n    onSubmit={(values,resolve,reject) => {\n\n        //do something with those values\n    }}\n    />\n\n')),(0,i.kt)("p",null,"And you're done!"))}d.isMDXComponent=!0}}]);